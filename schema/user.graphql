type User {
    id: ID!
    firstName: String
    lastName: String
    username: String
    password: String
    email: String
    mobile: String
    address: String
    active: Boolean
    lastLogin: Int
    lastPasswordChange: Int
    token: String
    role: Role
    createdAt: Int
    deletedAt: Int
    updatedAt: Int
}

input UserFilter {
    search: String
    where: UserWhere
}

input UserPagination {
    limit: Int!
    page: Int!
}

input UserWhere {
    id: IDFilter
    firstName: StringFilter
    lastName: StringFilter
    username: StringFilter
    password: StringFilter
    email: StringFilter
    mobile: StringFilter
    address: StringFilter
    active: BooleanFilter
    lastLogin: IntFilter
    lastPasswordChange: IntFilter
    token: StringFilter
    role: RoleWhere
    createdAt: IntFilter
    deletedAt: IntFilter
    updatedAt: IntFilter
    or: UserWhere
    and: UserWhere
}
input UserCreateInput {
    firstName: String!
    lastName: String!
    username: String!
    password: String!
    email: String!
    roleId: ID!
    mobile: String!
    address: String
    active: Boolean
}

input UserUpdateInput {
    id: ID!
    firstName: String
    lastName: String
    mobile: String
    address: String
}

input UsersCreateInput {
    users: [UserCreateInput!]!
}

type UserPayload {
    user: User!
}

type UserDeletePayload {
    id: ID!
}

type UsersPayload {
    users: [User!]!
    total: Int!   
}

type LoginResponse {
    token: String!
    refreshToken: String!
}

type ChangePasswordResponse {
    ok: Boolean!
}

type RefreshTokenResponse {
    token: String!
}