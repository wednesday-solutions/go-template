// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import "testing"

// This test suite runs each operation test in parallel.
// Example, if your database has 3 tables, the suite will run:
// table1, table2 and table3 Delete in parallel
// table1, table2 and table3 Insert in parallel, and so forth.
// It does NOT run each operation group in parallel.
// Separating the tests thusly grants avoidance of Postgres deadlocks.
func TestParent(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrations)
	t.Run("Roles", testRoles)
	t.Run("Subjects", testSubjects)
	t.Run("UserSubjects", testUserSubjects)
	t.Run("Users", testUsers)
}

func TestDelete(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsDelete)
	t.Run("Roles", testRolesDelete)
	t.Run("Subjects", testSubjectsDelete)
	t.Run("UserSubjects", testUserSubjectsDelete)
	t.Run("Users", testUsersDelete)
}

func TestQueryDeleteAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsQueryDeleteAll)
	t.Run("Roles", testRolesQueryDeleteAll)
	t.Run("Subjects", testSubjectsQueryDeleteAll)
	t.Run("UserSubjects", testUserSubjectsQueryDeleteAll)
	t.Run("Users", testUsersQueryDeleteAll)
}

func TestSliceDeleteAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsSliceDeleteAll)
	t.Run("Roles", testRolesSliceDeleteAll)
	t.Run("Subjects", testSubjectsSliceDeleteAll)
	t.Run("UserSubjects", testUserSubjectsSliceDeleteAll)
	t.Run("Users", testUsersSliceDeleteAll)
}

func TestExists(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsExists)
	t.Run("Roles", testRolesExists)
	t.Run("Subjects", testSubjectsExists)
	t.Run("UserSubjects", testUserSubjectsExists)
	t.Run("Users", testUsersExists)
}

func TestFind(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsFind)
	t.Run("Roles", testRolesFind)
	t.Run("Subjects", testSubjectsFind)
	t.Run("UserSubjects", testUserSubjectsFind)
	t.Run("Users", testUsersFind)
}

func TestBind(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsBind)
	t.Run("Roles", testRolesBind)
	t.Run("Subjects", testSubjectsBind)
	t.Run("UserSubjects", testUserSubjectsBind)
	t.Run("Users", testUsersBind)
}

func TestOne(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsOne)
	t.Run("Roles", testRolesOne)
	t.Run("Subjects", testSubjectsOne)
	t.Run("UserSubjects", testUserSubjectsOne)
	t.Run("Users", testUsersOne)
}

func TestAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsAll)
	t.Run("Roles", testRolesAll)
	t.Run("Subjects", testSubjectsAll)
	t.Run("UserSubjects", testUserSubjectsAll)
	t.Run("Users", testUsersAll)
}

func TestCount(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsCount)
	t.Run("Roles", testRolesCount)
	t.Run("Subjects", testSubjectsCount)
	t.Run("UserSubjects", testUserSubjectsCount)
	t.Run("Users", testUsersCount)
}

func TestInsert(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsInsert)
	t.Run("GorpMigrations", testGorpMigrationsInsertWhitelist)
	t.Run("Roles", testRolesInsert)
	t.Run("Roles", testRolesInsertWhitelist)
	t.Run("Subjects", testSubjectsInsert)
	t.Run("Subjects", testSubjectsInsertWhitelist)
	t.Run("UserSubjects", testUserSubjectsInsert)
	t.Run("UserSubjects", testUserSubjectsInsertWhitelist)
	t.Run("Users", testUsersInsert)
	t.Run("Users", testUsersInsertWhitelist)
}

// TestToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestToOne(t *testing.T) {
	t.Run("UserSubjectToSubjectUsingSubject", testUserSubjectToOneSubjectUsingSubject)
	t.Run("UserSubjectToUserUsingUser", testUserSubjectToOneUserUsingUser)
	t.Run("UserToRoleUsingRole", testUserToOneRoleUsingRole)
}

// TestOneToOne tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOne(t *testing.T) {}

// TestToMany tests cannot be run in parallel
// or deadlocks can occur.
func TestToMany(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManyUsers)
	t.Run("SubjectToUserSubjects", testSubjectToManyUserSubjects)
	t.Run("UserToUserSubjects", testUserToManyUserSubjects)
}

// TestToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneSet(t *testing.T) {
	t.Run("UserSubjectToSubjectUsingUserSubjects", testUserSubjectToOneSetOpSubjectUsingSubject)
	t.Run("UserSubjectToUserUsingUserSubjects", testUserSubjectToOneSetOpUserUsingUser)
	t.Run("UserToRoleUsingUsers", testUserToOneSetOpRoleUsingRole)
}

// TestToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToOneRemove(t *testing.T) {
	t.Run("UserSubjectToSubjectUsingUserSubjects", testUserSubjectToOneRemoveOpSubjectUsingSubject)
	t.Run("UserSubjectToUserUsingUserSubjects", testUserSubjectToOneRemoveOpUserUsingUser)
	t.Run("UserToRoleUsingUsers", testUserToOneRemoveOpRoleUsingRole)
}

// TestOneToOneSet tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneSet(t *testing.T) {}

// TestOneToOneRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestOneToOneRemove(t *testing.T) {}

// TestToManyAdd tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyAdd(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManyAddOpUsers)
	t.Run("SubjectToUserSubjects", testSubjectToManyAddOpUserSubjects)
	t.Run("UserToUserSubjects", testUserToManyAddOpUserSubjects)
}

// TestToManySet tests cannot be run in parallel
// or deadlocks can occur.
func TestToManySet(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManySetOpUsers)
	t.Run("SubjectToUserSubjects", testSubjectToManySetOpUserSubjects)
	t.Run("UserToUserSubjects", testUserToManySetOpUserSubjects)
}

// TestToManyRemove tests cannot be run in parallel
// or deadlocks can occur.
func TestToManyRemove(t *testing.T) {
	t.Run("RoleToUsers", testRoleToManyRemoveOpUsers)
	t.Run("SubjectToUserSubjects", testSubjectToManyRemoveOpUserSubjects)
	t.Run("UserToUserSubjects", testUserToManyRemoveOpUserSubjects)
}

func TestReload(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsReload)
	t.Run("Roles", testRolesReload)
	t.Run("Subjects", testSubjectsReload)
	t.Run("UserSubjects", testUserSubjectsReload)
	t.Run("Users", testUsersReload)
}

func TestReloadAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsReloadAll)
	t.Run("Roles", testRolesReloadAll)
	t.Run("Subjects", testSubjectsReloadAll)
	t.Run("UserSubjects", testUserSubjectsReloadAll)
	t.Run("Users", testUsersReloadAll)
}

func TestSelect(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsSelect)
	t.Run("Roles", testRolesSelect)
	t.Run("Subjects", testSubjectsSelect)
	t.Run("UserSubjects", testUserSubjectsSelect)
	t.Run("Users", testUsersSelect)
}

func TestUpdate(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsUpdate)
	t.Run("Roles", testRolesUpdate)
	t.Run("Subjects", testSubjectsUpdate)
	t.Run("UserSubjects", testUserSubjectsUpdate)
	t.Run("Users", testUsersUpdate)
}

func TestSliceUpdateAll(t *testing.T) {
	t.Run("GorpMigrations", testGorpMigrationsSliceUpdateAll)
	t.Run("Roles", testRolesSliceUpdateAll)
	t.Run("Subjects", testSubjectsSliceUpdateAll)
	t.Run("UserSubjects", testUserSubjectsSliceUpdateAll)
	t.Run("Users", testUsersSliceUpdateAll)
}
