// Code generated by SQLBoiler 3.7.1 (https://github.com/volatiletech/sqlboiler). DO NOT EDIT.
// This file is meant to be re-generated in place and/or deleted at any time.

package models

import (
	"bytes"
	"context"
	"reflect"
	"testing"

	"github.com/volatiletech/sqlboiler/boil"
	"github.com/volatiletech/sqlboiler/queries"
	"github.com/volatiletech/sqlboiler/randomize"
	"github.com/volatiletech/sqlboiler/strmangle"
)

var (
	// Relationships sometimes use the reflection helper queries.Equal/queries.Assign
	// so force a package dependency in case they don't.
	_ = queries.Equal
)

func testSubjects(t *testing.T) {
	t.Parallel()

	query := Subjects()

	if query.Query == nil {
		t.Error("expected a query, got nothing")
	}
}

func testSubjectsDelete(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := o.Delete(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubjectsQueryDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if rowsAff, err := Subjects().DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubjectsSliceDeleteAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SubjectSlice{o}

	if rowsAff, err := slice.DeleteAll(ctx, tx); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only have deleted one row, but affected:", rowsAff)
	}

	count, err := Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 0 {
		t.Error("want zero records, got:", count)
	}
}

func testSubjectsExists(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	e, err := SubjectExists(ctx, tx, o.ID)
	if err != nil {
		t.Errorf("Unable to check if Subject exists: %s", err)
	}
	if !e {
		t.Errorf("Expected SubjectExists to return true, but got false.")
	}
}

func testSubjectsFind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	subjectFound, err := FindSubject(ctx, tx, o.ID)
	if err != nil {
		t.Error(err)
	}

	if subjectFound == nil {
		t.Error("want a record, got nil")
	}
}

func testSubjectsBind(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = Subjects().Bind(ctx, tx, o); err != nil {
		t.Error(err)
	}
}

func testSubjectsOne(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if x, err := Subjects().One(ctx, tx); err != nil {
		t.Error(err)
	} else if x == nil {
		t.Error("expected to get a non nil record")
	}
}

func testSubjectsAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	subjectOne := &Subject{}
	subjectTwo := &Subject{}
	if err = randomize.Struct(seed, subjectOne, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}
	if err = randomize.Struct(seed, subjectTwo, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = subjectOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = subjectTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Subjects().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 2 {
		t.Error("want 2 records, got:", len(slice))
	}
}

func testSubjectsCount(t *testing.T) {
	t.Parallel()

	var err error
	seed := randomize.NewSeed()
	subjectOne := &Subject{}
	subjectTwo := &Subject{}
	if err = randomize.Struct(seed, subjectOne, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}
	if err = randomize.Struct(seed, subjectTwo, subjectDBTypes, false, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = subjectOne.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}
	if err = subjectTwo.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 2 {
		t.Error("want 2 records, got:", count)
	}
}

func testSubjectsInsert(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubjectsInsertWhitelist(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Whitelist(subjectColumnsWithoutDefault...)); err != nil {
		t.Error(err)
	}

	count, err := Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}
}

func testSubjectToManyUserSubjects(t *testing.T) {
	var err error
	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Subject
	var b, c UserSubject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	if err = randomize.Struct(seed, &b, userSubjectDBTypes, false, userSubjectColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}
	if err = randomize.Struct(seed, &c, userSubjectDBTypes, false, userSubjectColumnsWithDefault...); err != nil {
		t.Fatal(err)
	}

	queries.Assign(&b.SubjectID, a.ID)
	queries.Assign(&c.SubjectID, a.ID)
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	check, err := a.UserSubjects().All(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}

	bFound, cFound := false, false
	for _, v := range check {
		if queries.Equal(v.SubjectID, b.SubjectID) {
			bFound = true
		}
		if queries.Equal(v.SubjectID, c.SubjectID) {
			cFound = true
		}
	}

	if !bFound {
		t.Error("expected to find b")
	}
	if !cFound {
		t.Error("expected to find c")
	}

	slice := SubjectSlice{&a}
	if err = a.L.LoadUserSubjects(ctx, tx, false, (*[]*Subject)(&slice), nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserSubjects); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	a.R.UserSubjects = nil
	if err = a.L.LoadUserSubjects(ctx, tx, true, &a, nil); err != nil {
		t.Fatal(err)
	}
	if got := len(a.R.UserSubjects); got != 2 {
		t.Error("number of eager loaded records wrong, got:", got)
	}

	if t.Failed() {
		t.Logf("%#v", check)
	}
}

func testSubjectToManyAddOpUserSubjects(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Subject
	var b, c, d, e UserSubject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subjectDBTypes, false, strmangle.SetComplement(subjectPrimaryKeyColumns, subjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserSubject{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userSubjectDBTypes, false, strmangle.SetComplement(userSubjectPrimaryKeyColumns, userSubjectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	foreignersSplitByInsertion := [][]*UserSubject{
		{&b, &c},
		{&d, &e},
	}

	for i, x := range foreignersSplitByInsertion {
		err = a.AddUserSubjects(ctx, tx, i != 0, x...)
		if err != nil {
			t.Fatal(err)
		}

		first := x[0]
		second := x[1]

		if !queries.Equal(a.ID, first.SubjectID) {
			t.Error("foreign key was wrong value", a.ID, first.SubjectID)
		}
		if !queries.Equal(a.ID, second.SubjectID) {
			t.Error("foreign key was wrong value", a.ID, second.SubjectID)
		}

		if first.R.Subject != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}
		if second.R.Subject != &a {
			t.Error("relationship was not added properly to the foreign slice")
		}

		if a.R.UserSubjects[i*2] != first {
			t.Error("relationship struct slice not set to correct value")
		}
		if a.R.UserSubjects[i*2+1] != second {
			t.Error("relationship struct slice not set to correct value")
		}

		count, err := a.UserSubjects().Count(ctx, tx)
		if err != nil {
			t.Fatal(err)
		}
		if want := int64((i + 1) * 2); count != want {
			t.Error("want", want, "got", count)
		}
	}
}

func testSubjectToManySetOpUserSubjects(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Subject
	var b, c, d, e UserSubject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subjectDBTypes, false, strmangle.SetComplement(subjectPrimaryKeyColumns, subjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserSubject{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userSubjectDBTypes, false, strmangle.SetComplement(userSubjectPrimaryKeyColumns, userSubjectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err = a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = b.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}
	if err = c.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.SetUserSubjects(ctx, tx, false, &b, &c)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UserSubjects().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	err = a.SetUserSubjects(ctx, tx, true, &d, &e)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UserSubjects().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SubjectID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SubjectID) {
		t.Error("want c's foreign key value to be nil")
	}
	if !queries.Equal(a.ID, d.SubjectID) {
		t.Error("foreign key was wrong value", a.ID, d.SubjectID)
	}
	if !queries.Equal(a.ID, e.SubjectID) {
		t.Error("foreign key was wrong value", a.ID, e.SubjectID)
	}

	if b.R.Subject != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Subject != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Subject != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}
	if e.R.Subject != &a {
		t.Error("relationship was not added properly to the foreign struct")
	}

	if a.R.UserSubjects[0] != &d {
		t.Error("relationship struct slice not set to correct value")
	}
	if a.R.UserSubjects[1] != &e {
		t.Error("relationship struct slice not set to correct value")
	}
}

func testSubjectToManyRemoveOpUserSubjects(t *testing.T) {
	var err error

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()

	var a Subject
	var b, c, d, e UserSubject

	seed := randomize.NewSeed()
	if err = randomize.Struct(seed, &a, subjectDBTypes, false, strmangle.SetComplement(subjectPrimaryKeyColumns, subjectColumnsWithoutDefault)...); err != nil {
		t.Fatal(err)
	}
	foreigners := []*UserSubject{&b, &c, &d, &e}
	for _, x := range foreigners {
		if err = randomize.Struct(seed, x, userSubjectDBTypes, false, strmangle.SetComplement(userSubjectPrimaryKeyColumns, userSubjectColumnsWithoutDefault)...); err != nil {
			t.Fatal(err)
		}
	}

	if err := a.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Fatal(err)
	}

	err = a.AddUserSubjects(ctx, tx, true, foreigners...)
	if err != nil {
		t.Fatal(err)
	}

	count, err := a.UserSubjects().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 4 {
		t.Error("count was wrong:", count)
	}

	err = a.RemoveUserSubjects(ctx, tx, foreigners[:2]...)
	if err != nil {
		t.Fatal(err)
	}

	count, err = a.UserSubjects().Count(ctx, tx)
	if err != nil {
		t.Fatal(err)
	}
	if count != 2 {
		t.Error("count was wrong:", count)
	}

	if !queries.IsValuerNil(b.SubjectID) {
		t.Error("want b's foreign key value to be nil")
	}
	if !queries.IsValuerNil(c.SubjectID) {
		t.Error("want c's foreign key value to be nil")
	}

	if b.R.Subject != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if c.R.Subject != nil {
		t.Error("relationship was not removed properly from the foreign struct")
	}
	if d.R.Subject != &a {
		t.Error("relationship to a should have been preserved")
	}
	if e.R.Subject != &a {
		t.Error("relationship to a should have been preserved")
	}

	if len(a.R.UserSubjects) != 2 {
		t.Error("should have preserved two relationships")
	}

	// Removal doesn't do a stable deletion for performance so we have to flip the order
	if a.R.UserSubjects[1] != &d {
		t.Error("relationship to d should have been preserved")
	}
	if a.R.UserSubjects[0] != &e {
		t.Error("relationship to e should have been preserved")
	}
}

func testSubjectsReload(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	if err = o.Reload(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSubjectsReloadAll(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice := SubjectSlice{o}

	if err = slice.ReloadAll(ctx, tx); err != nil {
		t.Error(err)
	}
}

func testSubjectsSelect(t *testing.T) {
	t.Parallel()

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	slice, err := Subjects().All(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if len(slice) != 1 {
		t.Error("want one record, got:", len(slice))
	}
}

var (
	subjectDBTypes = map[string]string{`ID`: `integer`, `Name`: `text`, `CreatedAt`: `timestamp with time zone`, `UpdatedAt`: `timestamp with time zone`, `DeletedAt`: `timestamp with time zone`}
	_              = bytes.MinRead
)

func testSubjectsUpdate(t *testing.T) {
	t.Parallel()

	if 0 == len(subjectPrimaryKeyColumns) {
		t.Skip("Skipping table with no primary key columns")
	}
	if len(subjectAllColumns) == len(subjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	if rowsAff, err := o.Update(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("should only affect one row but affected", rowsAff)
	}
}

func testSubjectsSliceUpdateAll(t *testing.T) {
	t.Parallel()

	if len(subjectAllColumns) == len(subjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	o := &Subject{}
	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectColumnsWithDefault...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Insert(ctx, tx, boil.Infer()); err != nil {
		t.Error(err)
	}

	count, err := Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}

	if count != 1 {
		t.Error("want one record, got:", count)
	}

	if err = randomize.Struct(seed, o, subjectDBTypes, true, subjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	// Remove Primary keys and unique columns from what we plan to update
	var fields []string
	if strmangle.StringSliceMatch(subjectAllColumns, subjectPrimaryKeyColumns) {
		fields = subjectAllColumns
	} else {
		fields = strmangle.SetComplement(
			subjectAllColumns,
			subjectPrimaryKeyColumns,
		)
	}

	value := reflect.Indirect(reflect.ValueOf(o))
	typ := reflect.TypeOf(o).Elem()
	n := typ.NumField()

	updateMap := M{}
	for _, col := range fields {
		for i := 0; i < n; i++ {
			f := typ.Field(i)
			if f.Tag.Get("boil") == col {
				updateMap[col] = value.Field(i).Interface()
			}
		}
	}

	slice := SubjectSlice{o}
	if rowsAff, err := slice.UpdateAll(ctx, tx, updateMap); err != nil {
		t.Error(err)
	} else if rowsAff != 1 {
		t.Error("wanted one record updated but got", rowsAff)
	}
}

func testSubjectsUpsert(t *testing.T) {
	t.Parallel()

	if len(subjectAllColumns) == len(subjectPrimaryKeyColumns) {
		t.Skip("Skipping table with only primary key columns")
	}

	seed := randomize.NewSeed()
	var err error
	// Attempt the INSERT side of an UPSERT
	o := Subject{}
	if err = randomize.Struct(seed, &o, subjectDBTypes, true); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	ctx := context.Background()
	tx := MustTx(boil.BeginTx(ctx, nil))
	defer func() { _ = tx.Rollback() }()
	if err = o.Upsert(ctx, tx, false, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Subject: %s", err)
	}

	count, err := Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}

	// Attempt the UPDATE side of an UPSERT
	if err = randomize.Struct(seed, &o, subjectDBTypes, false, subjectPrimaryKeyColumns...); err != nil {
		t.Errorf("Unable to randomize Subject struct: %s", err)
	}

	if err = o.Upsert(ctx, tx, true, nil, boil.Infer(), boil.Infer()); err != nil {
		t.Errorf("Unable to upsert Subject: %s", err)
	}

	count, err = Subjects().Count(ctx, tx)
	if err != nil {
		t.Error(err)
	}
	if count != 1 {
		t.Error("want one record, got:", count)
	}
}
